from typing import Callable, Any
from __future__ import annotations


class Task:
    name: str
    exe: Callable[..., dict[str, Any]]
    fin: Callable[..., None]
    err: Callable[..., None]
    
    def __init__(self, on_execute, on_finish, on_error) -> None:
        self.exe = on_execute
        self.fin = on_finish
        self.err = on_error
    

class DAGConstructCtx:
    dag: "DAG"
    prev: Task
    
    def __init__(self, dag: "DAG", prev: Task) -> None:
        self.dag = dag
        self.prev = prev

    def add_node(self, task: Task) -> DAGConstructCtx:
        self.dag.add_neighbor(self.prev, task)

        return DAGConstructCtx(dag=self.dag, prev=task)

class DAG:
    _adj: dict[str, list[Task]]
    
    def __init__(self) -> None:
        pass
    

    def add_node(self, task: Task) -> DAGConstructCtx:
        self._adj[task.name] = []

        return DAGConstructCtx(dag=self, prev=task)
    
    def add_neighbor(self, downstream: Task, upstream: Task) -> None:
        if downstream not in self._adj:
            self._adj[downstream.name] = []
        self._adj[downstream.name].append(upstream)
